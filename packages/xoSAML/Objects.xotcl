package provide xoSAML::Objects 0.1

package require XOTcl
package require xoSAML::Schema

namespace eval ::xoSAML::Objects {
	
proc isCallerCodeGenerator {caller} {
	# exit here if the CodeGenerator instantiated this class 
	if { [Object isobject $caller] && \
	     [$caller procsearch class] ne "" && \
	     [$caller class] eq "::xoXSD::CodeGenerator" } {
		return true
	}
	return false
}

namespace eval Private {
	::xotcl::Class Wrapper -slots {
		::xotcl::Attribute object
	}
	
	Wrapper instforward .       {% my object} %proc
	Wrapper instforward print   {% my object} %proc
	Wrapper instforward check   {% my object} %proc
	Wrapper instforward marshal {% my object} %proc
	
	Wrapper instproc initObject {type {args ""}} {
		my object [$type new $args]
	}
	
	Wrapper instproc getSubstitutedCommand {} {
		return [lindex [split [dict get [info frame -2] cmd] " "] 0]
    	}
    	
    	Wrapper instproc unknown {cmd args} {
    		if { [llength $args] } {
    			return [[my object] $cmd $args]
    		} 
    		return [[my object] $cmd]
    	}
}

namespace export *	

::xotcl::Class Request		-superclass Private::Wrapper
::xotcl::Class Condition	-superclass Private::Wrapper
::xotcl::Class Response		-superclass Private::Wrapper
	
::xotcl::Class NameIdentifier	-superclass ::xoSAML::saml::NameIDType
::xotcl::Class Subject		-superclass ::xoSAML::saml::Subject
::xotcl::Class Assertion	-superclass ::xoSAML::saml::Assertion
::xotcl::Class Attribute	-superclass ::xoSAML::saml::Attribute
::xotcl::Class Status		-superclass ::xoSAML::samlp::Status

Request instproc init { {type ""} } {
	set type "::xoSAML::samlp::[namespace tail [my getSubstitutedCommand]]"
	if { ![Object isobject $type] || ![$type isclass] } {
		set type "::xoSAML::samlp::AuthnRequest"
	}
	my initObject $type
	
	if { [isCallerCodeGenerator [self callingobject]] } return
	
	#set reasonable defaults...
	my Version "2.0"
	my IssueInstant now
}

Request instproc send {receiver} {
	my __error "Load a SAML Binding if you want to use the function '[self proc]'!"
}

Response instproc init args {
	set type "::xoSAML::samlp::[namespace tail [my getSubstitutedCommand]]"
	if { ![Object isobject $type] || ![$type isclass] } {
		set type "::xoSAML::samlp::Response"
	}
	my initObject $type
	
	if { [isCallerCodeGenerator [self callingobject]] } return
	
	#set reasonable defaults
	my Version "2.0"
	my IssueInstant now
}

Response instproc receive {sender} {
	my __error "Load a SAML Binding if you want to use the function '[self proc]'!"
}

Response instproc hasRelayState {} {
	return [expr [my exists RelayState]]
}

Response instproc getStatusCode { {-short:boolean false} } { 
	return [my . Status getStatusCode -short $short]
}

Status set codes [list \
	"Success" \
	"Requester" \
	"Responder" \
	"VersionMismatch" \
	"AuthnFailed" \
	"InvalidAttrNameOrValue" \
	"InvalidNameIDPolicy" \
	"NoAuthnContext" \
	"NoAvailableIDP" \
	"NoPassive" \
	"NoSupportedIDP" \
	"PartialLogout" \
	"ProxyCountExceeded" \
	"RequestDenied" \
	"RequestUnsupported" \
	"RequestVersionDeprecated" \
	"RequestVersionTooHigh" \
	"RequestVersionTooLow" \
	"ResourceNotRecognized" \
	"TooManyResponses" \
	"UnknownAttrProfile" \
	"UnknownPrincipal" \
	"UnsupportedBinding" \
]

Status instproc init { {code ""} } {
	next
	
	if { [isCallerCodeGenerator [self callingobject]] } return
	if { $code eq "" } return
	
	set prefix "urn:oasis:names:tc:SAML:2.0:status:"

	[self class] instvar codes
	set found [lsearch -inline -nocase $codes $code]
	
	if { $found eq "" } {
		my __error "\"$code\" doesn't seem to be a valid StatusCode."
		return
	}
	
	set code [xoSAML::samlp::StatusCode new]
	$code Value "$prefix$found"
	my StatusCode $code
}

Status instproc getStatusCode { {-short:boolean false} } { 
	set code [my . StatusCode . Value getContent]
	if { $short } {
		set pos [expr {[string last ":" $code] + 1}]
		set code [string range $code $pos end]
	}
	return $code
}

Assertion instproc init args {	
	next
	
	if { [isCallerCodeGenerator [self callingobject]] } return
	
	#set reasonable defaults
	my Version "2.0"
	my IssueInstant now
}

Assertion instproc getAttributes {} {
	return [my . AttributeStatement . Attribute]
}

Assertion instproc hasAttributes {} {
	return [expr {[llength [my getAttributes]] > 0}]
}

Assertion instproc getExpiry { {-timestamp:boolean false} } {
	set expiry [my . Conditions . NotOnOrAfter]
	if { $timestamp } { 
		return [$expiry getTimestamp] 
	}
	return [$expiry getContent]
}

Assertion instproc getAuthenticationMechanism {} {
	if { ![my isAssigned AuthnStatement] } return
	set ctx [my . AuthnStatement . AuthnContext]
	if { [$ctx isAssigned AuthnContextClassRef] } {
		return [$ctx . AuthnContextClassRef getContent]
	} elseif { [$ctx isAssigned AuthnContextDecl] } {
		return [$ctx . AuthnContextDecl getContent]
	} elseif { [$ctx isAssigned AuthnContextDeclRef] } {
		return [$ctx . AuthnContextDeclRef getContent]
	}
}

Subject instproc init args {
	next
}

Attribute instproc init {{name ""} {values ""}} {	
	next
	
	if { [isCallerCodeGenerator [self callingobject]] } return
	
	my NameFormat "urn:oasis:names:tc:SAML:2.0:attrname-format:basic"
	if { $name ne "" } {
		my Name $name
	}
	if { $values ne "" } {
		foreach value $values {
			my addValue $value
		}
	}
}

Attribute instproc addValue {value} {
	my AttributeValue [::xoSAML::saml::AttributeValue new $value]
}

Attribute instproc getName {} {
	return [my . Name getContent]
}
	
Attribute instproc getValues {} {
	set values [list]
	foreach value [my AttributeValue] {
		lappend values [$value getContent]
	}
	return $values
}

}

