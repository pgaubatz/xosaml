package provide xoXSD::CodeGenerator 0.1

package require tdom
package require XOTcl

namespace import -force ::xotcl::*

namespace eval ::xoXSD {

::xotcl::Class CodeGenerator -slots {
	::xotcl::Attribute objects
	::xotcl::Attribute objectnames
	::xotcl::Attribute nsmap -default ""
	::xotcl::Attribute environment
}

CodeGenerator instproc init {{env ""}} {
	my environment $env
}

CodeGenerator instproc parse {data {nsmap ""}} {
	if { $data eq "" } return
	
	my objects [list]
	my objectnames [list]
	if { $nsmap ne "" } {
		my nsmap $nsmap
	}
	
	set doc [dom parse $data] 
	set root [$doc documentElement]
	
	my handleNode $root
	
	set o ""
	foreach object [my objects] {
		foreach line $object {
			append o "$line\n"
		}
		append o "\n"
	}
	return $o
}

CodeGenerator instproc parseAndEval {data {nsmap ""}} {
	set o [my parse $data $nsmap]
	if { $o eq "" } {
		return false
	}
	if { ![namespace exists [my environment]] } {
		puts "Error: Couldn't load the xoXSD-Environment-namespace ([my environment])!"
		return false
	}
	
	# 1) Require a per-object namespace (from now on, there will be a
	# Tcl namespace and an XOTcl object both being named [self]; see
	# http://media.wu-wien.ac.at/doc/langRef-xotcl.html#Object-requireNamespace
	my requireNamespace
	
	# 2) Load the xoXSD-Environment into the newly created namespace
	[my environment]::load [self]
	
	# 3) have the xoXSD script evaluated
	namespace eval [self] $o
	
	# 4) return the root-object
	return [self]::[lindex [my objectnames] end]
}

CodeGenerator instforward unmarshal %self parseAndEval

CodeGenerator instproc getPrefix {node} {
	set name [$node nodeName]
	set pos [string last ":" $name]
	if { $pos != -1 } { 
		return [string range $name 0 [expr {$pos - 1}]]
	}
	
	if { [my nsmap] eq "" } {
		return ""
	}
	set nsuri [$node namespaceURI]
	foreach ns [my nsmap] {
		if { [$node namespaceURI] eq [lindex $ns 1] } {
			return "[lindex $ns 0]\:"
		}
	}
	return ""
}
	
CodeGenerator instproc getName {node} {
	set name [my stripPrefix [$node nodeName]]
	set prefix [my getPrefix $node]
	if { $prefix eq "" } {
		puts "#WARNING: Could not determine a XML namespace prefix for \"$name\" (namespace: [$node namespaceURI])"
	}
	return "$prefix\::$name"
}
	
CodeGenerator instproc stripPrefix {name} {
	set pos [string last ":" $name]
	if { $pos == -1 } { return $name }
	return [string range $name [expr {$pos + 1}] end]
}

CodeGenerator instproc stripInitString {name} {
	return [lrange [split $name " "] 0 1]
}

CodeGenerator instproc handleNode {node} {
	set nodeName [$node nodeName]
	if { $nodeName eq "#comment" || $nodeName eq "#cdata" } {
		return
	}
	
	set name [my getName $node]
	set objname [Object autoname xoxsdobj]
	set obj [list]
	
	set init "$name $objname"
	foreach child [$node childNodes] {
		if { [$child nodeName] eq "#text" } {
			set text [string trim [$child nodeValue]]
			set text [string map {"\n" "\\n" "\r" "\\r"} $text]
			append init " \"$text\""
			$child delete
			break
		}
	}
	lappend obj $init
	
	if { [$node hasAttribute "xmlns"] } {
		$node removeAttribute "xmlns"
	}
	foreach attribute [$node attributes "xmlns:*"] {
		$node removeAttribute "xmlns:[lindex $attribute 0]"
	}
	
	foreach attribute [$node attributes] {
		if { [lindex $attribute 1] ne "" } continue
		lappend obj "$objname $attribute \"[$node getAttribute [lindex $attribute 0]]\""
	}
	
	foreach child [$node childNodes] {
		set childobj [my stripPrefix [my stripInitString [lindex [my handleNode $child] 0]]]
		lappend obj "$objname $childobj"
	}
	
	my lappend objects $obj
	my lappend objectnames $objname
	return $obj
}
	
}
