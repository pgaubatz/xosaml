package provide xoXSD::Core 0.1

package require tdom
package require XOTcl
package require xoXSD::DataTypes

namespace eval ::xoXSD::Core {
	
##############################################
#               * Definition *               #
##############################################	
	
::xotcl::Class Generic		-superclass ::xotcl::Class -slots {
	::xotcl::Attribute rootClass	
	::xotcl::Attribute elements
	::xotcl::Attribute attributes
	::xotcl::Attribute children
}

::xotcl::Class Element		-superclass ::xoXSD::Core::Generic 

::xotcl::Class ComplexType	-superclass ::xoXSD::Core::Generic

::xotcl::Class Sequence		-superclass ::xoXSD::Core::Generic -slots {
	::xotcl::Attribute sequence -default false
}

::xotcl::Class Choice		-superclass ::xoXSD::Core::Generic -slots {
	::xotcl::Attribute slotfree 	 -default true
	::xotcl::Attribute choiceparents -default ""
}

namespace export *
	
##############################################
#              * Constructors *              #
##############################################

Generic instproc init { {rootClass ""} } {
	if { $rootClass == "" } {
		my rootClass [my class]
	} else {
		my rootClass $rootClass
	}
	
	set heritage [list]
	foreach c [[my class] info heritage] {
		if { [namespace qualifiers $c] == "::xoXSD::Core" } break
		lappend heritage $c
	}

	my children [list]
	my elements [list]
	my attributes [list]
	
	# create new instances of all classchildren
	foreach c [concat [my class] [lreverse $heritage]] {
		foreach	child [$c info classchildren] {
			set ch [eval $child new -childof [self] [my rootClass]]
			my lappend children $ch
		}
	}
	
	foreach slot [my getLocalSlots] {
		set slotclass [namespace tail [$slot class]]
		
		if { $slotclass == "XML:Attribute" } {
			my addAttribute $slot
		} elseif { $slotclass == "XML:Element" } {
			my addElement $slot
		} 
	}	
}

Sequence instproc init args {
	# Generic->init
	next 
	
	set slots [list]
	foreach slot [my getLocalSlots] {
		if { [namespace tail [$slot class]] == "XML:Attribute" } {
			continue
		}
		lappend slots [list $slot [$slot sequence]]
	}
	
	my sequence [list]
	foreach slot [lsort -integer -index 1 $slots] {
		set slot [lindex $slot 0]
		set slotname [namespace tail $slot]
		set slotclass [namespace tail [$slot class]]
		
		if { $slotclass == "XML:Child" } {
			foreach child [my children] {
				set childclass [namespace tail [$child class]]
				if { $childclass == $slotname } {
					my lappend sequence $child	
				}
			}
		} else {
			my lappend sequence $slot
		}
	}
	
	# add the missing childclasses (with no sequence)
	foreach child [my children] {
		if { [lsearch [my sequence] $child] == -1 } {
			my lappend sequence $child
		}
	}
}

Choice instproc init args {
	# Generic->init
	next 	
	
	# get "choice-parents"...
	set parent [my info parent]
	while { [Object isobject $parent] } {
		set cls [namespace tail [$parent class]]
		if { [string match "__choice*" $cls] } {
			my lappend choiceparents $parent	
		}
		set parent [$parent info parent]
	}
}

##############################################
# * Various "publicly" available functions * #
##############################################

Generic instproc check {} {
	set validity true
	foreach slot [my attributes] {
		if { [$slot use] == "required" && ![my slotFilled $slot] } {
			set validity false
			my error "needs object: [namespace tail $slot] (type: [$slot type])"
		}
	}
	foreach slot [my elements] {
		if { ![my checkMinOccurs $slot] } { set validity false }
	}
	foreach child [my children] {
		set result [$child check]
		# the object is already invalid, we just want the error message:
		if { !$validity } continue
		set validity $result
	}
	return $validity
}
	
Choice instproc check {} {
	if { [my slotfree] } { return true }
	
	set choice ""
	foreach slot [my elements] {
		if { [my slotFilled $slot] } {
			set choice $slot
			break
		}
	}	
	if { $choice == "" } { return true }
	
	set validity [my checkMinOccurs $choice]
	foreach child [my children] {
		set result [$child check]
		# the object is already invalid, we just want the error message:
		if { !$validity } continue
		set validity $result
	}
	return $validity
}

Generic instproc export { {addXmlNamespaces true} {name ""}} {
	if { ![my check] } {
		my error "is not valid."
		return ""
	}
	
	# create the document:
	set doc [dom createDocument [my getXmlElementExportName]]
	set root [$doc documentElement]
	
	# add the xmlns-attributes:
	if { $addXmlNamespaces } {
		set prefix [my getXmlPrefix]	
		$root setAttribute "xmlns:$prefix" [my getXmlNamespace]
		my setXmlnsAttributes $root	
	}
	
	# add the attributes:
	my exportAttributes $doc $root
	
	# add the containing sub-elements:
	my exportElements $doc $root	

	return [$root asXML]
}

Generic instproc getSlot {slot} {
	set slot [my doGetSlot $slot]
	if { $slot == false } {
		my error "there is no such Element/Attribute to be get: $slot"	
		return false
	} 
	return $slot
}

Generic instproc getSlotClass {slot} {
	set slotclass [my doGetSlotClass $slot]
	if { $slot == false } {
		my error "there is no such slot: $slot"	
		return false
	} 
	return $slotclass
}

Generic instproc setSlot {slot value} {
	if { [my doSetSlot $slot $value] == true } {
		return true
	} else {
		my error "there is no such Element/Attribute to be set: $slot"	
		return false
	}
}

Generic instproc initSlot {slot args} {	
	set slotclass [my getSlotClass $slot]
	if { $slotclass == false } {
		my error "there is no such slot: $slot"
		return false
	}
	set slottype [$slotclass type]
	if { [namespace qualifiers $slottype] != "::xoXSD::DataTypes" } {
		my error "\"$slot\" is no basic data type."
		return false
	}
	set content [$slottype new $args]
	if { [$content valid] } {
		my setSlot $slot $content
	} else {
		my error "the content of \"$slot\" is not valid."
		return false
	}
}

Generic instproc printSlots { {isRoot true} {c ""} } {
	if { $isRoot } {
		set c [my class]
		puts "\n[self] ([namespace tail $c]) has the following slots:"
	}
	foreach slot [my getSlots] {	
		set isset ""
		set slotclass [namespace tail [$slot class]]
		set slotname [namespace tail $slot]
		if { $slotname == "__any" || $slotname == "__anyAttribute" } {
			set slottype ""
		} else {
			set slottype "([$slot type])"
		}
		if { [my slotFilled $slot] } { set isset "\[filled\]" }
		set slot [string range $slot 2 end]
		set slot [string map {"::slot" ""} $slot]
		set slot [string map {"::" " -> "} $slot]
		set slot [string map {"__" ""} $slot]
		puts " *) $slotclass\: $slot $slottype $isset"
	}	
	foreach child [my children] {
		$child printSlots false	$c
	}
}
	
Generic instproc addAny {slot} {
	set slotname [namespace tail [$slot class]]
	
	# first check if the element actually has an <any> element:
	set any [my getSlotClass __any]
	if { $any == false } {
		my error "there is no <any> element to be set."
		return false
	}
	
	# search for the class/instance that has the __any slot defined:
	set cls [[$any info parent] info parent]
	set inst ""
	foreach inst [concat [self] [my getAllChildren]] {
		set c [$inst class]
		if { $c == $cls || [lsearch [$c info heritage] $cls] != -1 } { 
			break
		}
	}
	if { $inst == "" } { error "should not reach here. didn't find inst!" }
	
	# check if a slot named $slotname already exists:
	if { [$inst slotExists $slotname] } {
		my error "there's is already a slot named \"$slotname\"."
		return false
	}
	
	# check for maxOccurs restrictions:
	set anyslot "$cls\::slot\::__any"
	set anyCounter [$anyslot anyCounter]
	set maxOccurs [$anyslot maxOccurs]
	if { $maxOccurs != "unbounded" } {
		if { $anyCounter >= $maxOccurs } {
			my error "cannot be set because of a maxOccurs restriction."
			return false
		}
	}
	
	# check for namespace restrictions:
	set namespaces [split [$anyslot namespace] " "]
	if { ![my checkAnyNamespaceRestrictions $namespaces $inst $slot] } {
		my error "cannot be set because of namespace restrictions."
		return false
	}
	
	# dynamically create and add a new slot to the class
	$cls slots "::xoXSD::Slots::XML:Element $slotname -type [$slot class]"
	$inst addElement "$cls\::slot\::$slotname"
	
	# finally set the newly created slot
	my setSlot $slotname $slot
	
	# update the anyCounter if necessary
	if { $maxOccurs != "unbounded" } {
		$anyslot anyCounter [incr anyCounter]
	}
}
	
Generic instproc addAnyAttribute {slotname type value} {
	# first check if the element actually has an <any> element:
	set anyAttribute [my getSlotClass __anyAttribute]
	if { $anyAttribute == false } {
		my error "there is no <anyAttribute> attribute to be set."
		return false
	}
	
	# search for the class/instance that has the __anyAttribute slot defined:
	set cls [[$anyAttribute info parent] info parent]
	set inst ""
	foreach inst [concat [self] [my getAllChildren]] {
		set c [$inst class]
		if { $c == $cls || [lsearch [$c info heritage] $cls] != -1 } { 
			break
		}
	}
	if { $inst == "" } { error "should not reach here. didn't find inst!" }
	
	# check for namespace restrictions:
	set anyslot "$cls\::slot\::__anyAttribute"
	set namespaces [split [$anyslot namespace] " "]
	set content [$type new $value]
	if { ![my checkAnyNamespaceRestrictions $namespaces $inst $content] } {
		my error "cannot be set because of namespace restrictions."
		return false
	}
	
	# dynamically create and add a new slot to the class
	$cls slots "::xoXSD::Slots::XML:Attribute $slotname -type $type"
	$inst addAttribute "$cls\::slot\::$slotname"
	
	# finally set the newly created slot
	my setSlot $slotname $content
}

##############################################
#         * Various helper functions *       #
# Note: you shouldn't call them directly.    #
##############################################

Generic instproc exportAttributes {doc root} {
	# iterate over all attributes
	foreach attribute [my attributes] {
		my exportAttribute $doc $root $attribute
	}
	
	# do the same with all children
	foreach child [my children] {
		$child exportAttributes $doc $root	
	}
}

Generic instproc exportAttribute {doc root attribute} {
	if { ![my slotFilled $attribute] } return
	
	set content [[my [namespace tail $attribute]] getContent]
	if { [$attribute text] } {
		$root appendChild [$doc createTextNode $content]
	} else {	
		$root setAttribute [namespace tail $attribute] $content
	}
}

Generic instproc exportElements {doc root} {
	# iterate over all elements
	foreach element [my elements] {
		my exportElement $doc $root $element
	}
	
	# do the same with all children
	foreach child [my children] {
		$child exportElements $doc $root	
	}
}

Sequence instproc exportElements {doc root} {
	foreach obj [my sequence] {
		if { [string match "*::slot::*" $obj ] } {
			my exportElement $doc $root $obj
		} else {
			$obj exportElements $doc $root	
		}
	}
}

Generic instproc exportElement {doc root element} {
	if { ![my slotFilled $element] } return
	
	set name [my getXmlElementExportName $element] 
	foreach element [my [namespace tail $element]] {
		$root appendXML [$element export false $name]
	}
}

Generic instproc setXmlnsAttributes {root} {
	foreach element [my elements] {
		set element [namespace tail $element]
		if { ![my slotFilled $element] } continue
		
		set element [lindex [my $element] 0]
		set ns [$element getXmlNamespace]
		set prefix [$element getXmlPrefix]
		
		$root setAttribute "xmlns:$prefix" $ns
	}	
	foreach child [my children] {
		$child setXmlnsAttributes $root
	}
}
	
Generic instproc getXmlElementExportName { {element ""} } {
	if { $element == "" } { 
		set element [my class] 
	}
	set name [namespace tail $element]
	set prefix [my getXmlPrefix]
	if { $prefix != "" } {
		set name "$prefix:$name"
	}	
	return $name
}

Generic instproc getRootNamespaceVariable {varname} {
	set qualifiers [namespace qualifiers [my rootClass]]
	if { [namespace eval $qualifiers info exists $varname] } {
		namespace upvar $qualifiers $varname var
		return $var
	}
	return ""
}

Generic instproc getXmlNamespace {} {
	return [my getRootNamespaceVariable xmlNamespace]
}

Generic instproc getXmlPrefix {} {
	return [my getRootNamespaceVariable xmlPrefix]
}

Generic instproc getSlots {} {
	return [concat [my elements] [my attributes]]
}

Generic instproc getLocalSlots {} {
	# now create a list of all slots
	set slots [[my class] info slots]
	
	# remember slotnames
	foreach slot $slots {set slotname([namespace tail $slot]) 1}
	
	# iterate over class structure
	set heritage [[my class] info heritage]
	foreach c [lsearch -inline -all -not $heritage "::xoXSD::Core::*"] {
		foreach slot [$c info slots] {
			set key slotname([namespace tail $slot])
			
			# don't add slots which are already defined in 
			# more specialized classes
			if {[info exists $key]} continue
			set $key 1
			lappend slots $slot
		}
	}
	
	return $slots
}

Generic instproc getSlotType {slot} {
	# returns either XML:Attribute, XML:Element or false
	set slotclass [my getSlotClass $slot]
	if { $slotclass == false } { return false }
	return [namespace tail [$slotclass class]]
}

Generic instproc doGetSlot {slot} {
	set slot [namespace tail $slot]
	
	if { ![my slotExists $slot] } {
		foreach child [my children] {
			return [$child doGetSlot $slot]		
		}
		# there is no such slot:
		return false
		
	} else {
		return [my $slot]
	}
}

Generic instproc doSetSlot {slot value} {
	set slot [namespace tail $slot]
	if { ![my slotExists $slot] } {
		if { [my children] == "" } { return -1 }
		foreach child [my children] {
			set result [$child doSetSlot $slot $value]
			if { $result != -1 } { return $result } 		
		}
		return -1
	} else {
		set c [my getSlotClass $slot]
		
		#Check if the given value-object matches the required type
		if { [$c type] != [$value class] } {
			my error "\"$slot\" has to be of type [$c type]"
			return false
		}
		
		#Check for a simpleType's enumeration restriction
		set enum [list]
		if { [$c exists enumvalues] } {
			set enum [$c enumvalues]
		}
		if { [llength $enum] > 0 } {
			if { [lsearch -exact $enum [$value getContent]] == -1 } {
				my error "\"$slot\" is not correctly formatted."
				return false
			}
		}
		
		#finally set slot
		if { [$c multivalued] && [my slotFilled $slot] } {
			set occurs [llength [my $slot]]
			set maxOccurs [$c maxOccurs]
			if { $maxOccurs == "unbounded" || $occurs < $maxOccurs } {
				my $slot add $value
			} else {
				my error "\"$slot\" cannot be set because of a maxOccurs restriction."
				return false
			}
		} else {
			my $slot $value
		}
		return true
	}
}

Choice instproc doSetSlot {slot value} {
	if { [my slotfree] } {
		if { [next] == true } {
			my slotfree false
			foreach parent [my choiceparents] {
				$parent slotfree false	
			}
			return true
		} else {
			return -1
		}
	} elseif { ![my slotfree] && [my slotExists $slot] } {
		if { [my children] == "" } { return -1 }
		foreach child [my children] {
			set result [$child doSetSlot $slot $value]
			if { $result != -1 } { return $result }
		}
		error "Shouldn't reach here!"
	} else {
		my error "is already set by another Element/Attribute."
		return false
	}
}

Generic instproc doGetSlotClass {slot} {
	set slot [namespace tail $slot]
	if { ![my slotExists $slot] } {
		if { [my children] == "" } { return -1 }
		foreach child [my children] {
			set result [$child doGetSlotClass $slot]
			if { $result != -1 } { return $result }
		}
		return false
		
	} else {
		return [lsearch -inline -glob [my getSlots] "*::$slot"]
	}
}

Generic instproc error {msg} {
	puts "XML-Error: [self] (type: [my class]) $msg"
}

Generic instproc slotExists {slot} {
	set existance [lsearch [my getSlots] "*::slot::[namespace tail $slot]"]
	return [expr { $existance != -1 } ]
}

Generic instproc slotFilled {slot} {
	return [my exists [namespace tail $slot]]
}

Generic instproc getAllChildren {} {
	set children [my children]
	foreach child [my children] {
		set children [concat $children [$child getAllChildren]]
	}
	return $children
}
	
Generic instproc addElement {element} {
	my lappend elements $element
}
		
Sequence instproc addElement {element} {
	next
	my lappend sequence $element
}	
	
Generic instproc addAttribute {attribute} {
	my lappend attributes $attribute
}
	
Generic instproc checkAnyNamespaceRestrictions {namespaces inst value} {	
	if { [lsearch $namespaces "##any"] != -1 } {
		return true
		
	} elseif { [lsearch $namespaces "##other"] != -1 } {
		if { [$value getXmlNamespace] != [$inst getXmlNamespace] } {
			return true
		} 
		
	} elseif { [lsearch $namespaces "##targetNamespace"] != -1 } {
		if { [$value getXmlNamespace] == [$inst getXmlNamespace] } {
			return true
		} 
		
	} elseif { [lsearch $namespaces "##local"] != -1 } {
		if { [$value getXmlNamespace] == "" } {
			return true
		} 
		
	} else {
		foreach ns $namespaces {
			if { $ns == [$value getXmlNamespace] } {
				return true
			}
		}
	}
	
	return false
}

Generic instproc checkMinOccurs {slot} {
	set name [namespace tail $slot]
	set validity true
	if { [$slot minOccurs] > 0 } {
		if { ![my slotFilled $slot] } {
			set validity false
			my error "needs object: $name (type: [$slot type])"
			
		} elseif { [llength [my $name]] < [$slot minOccurs] } {
			set validity false
			my error "needs [$slot minOccurs] instances of $name (type: [$slot type])"
		}	
	}	
	return $validity
}
	
}

