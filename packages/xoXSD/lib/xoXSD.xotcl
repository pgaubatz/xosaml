package provide xoXSD 0.1

package require XOTcl
package require xoXSD::Slots
package require xoXSD::DataTypes
package require xoXSD::Core

namespace unknown [list ::xoXSD::unknown]

namespace import -force ::xotcl::my
namespace import -force ::xotcl::next
namespace import -force ::xotcl::self
namespace import -force ::xotcl::Object
namespace import -force ::xotcl::Class

namespace eval ::xoXSD {
	
::xotcl::Class BaseClass -slots {
	::xotcl::Attribute Type
	::xotcl::Attribute Namespace
	::xotcl::Attribute Object
}

::xotcl::Class Generic -superclass ::xoXSD::BaseClass

variable searchPath [list]

proc addNamespace {ns {position end}} {
	global searchPath
	if { $position == "end" } {
		lappend searchPath $ns
	} else {
		set searchPath [linsert $searchPath $position $ns]
	}
}

addNamespace "::xoXSD::Core"
addNamespace "::xoXSD::DataTypes"

proc unknown {cmd args} { 
	global searchPath
	
	set found false
	set cmd [string map {":" "::"} $cmd]
	
	foreach path $searchPath {
		if { [namespace qualifiers $cmd] != "" } {
			set path [namespace qualifiers $path]
		}
		append path "::$cmd"
		if { [Object isobject $path] } {
			set found true
			break
		}
	}

	if { $found && [lindex $args 0] != ""} {
		set cmdname [lindex $args 0]
		set cmdargs [lrange $args 1 end]
		if { [lsearch [$path info heritage] "::xoXSD::BaseClass"] == -1 } {
			set run "::xoXSD::Generic $cmdname $path $cmdargs"
		} else {
			set run "$path $cmdname $cmdargs"
		}	
		
		uplevel #0 $run
		
	} else {
		#fallback: invoke the standard unknown-handler...
		::unknown $cmd $args
	}
}	

	

BaseClass instproc init args {
	if { [my Type] != "" } {
		set object "[my Namespace]::[my Type]"
		my Object [$object new]
	} else {
		error "ERROR: no Type given..."	
	}
}

BaseClass instproc getObject {} {
	return [my Object]	
}

BaseClass instproc unknown {cmd args} {
	if { $cmd == "export" || \
	     $cmd == "check"  || \
	     $cmd == "print"  || \
	     $cmd == "printSlots" } {
		return [[my Object] $cmd]
	}
	# simply forward everything else to the ::xoXSD::Core::*-Object:
	return [[my Object] unknown $cmd [join $args]]
}

BaseClass instproc addAny {slot} {
	return [[my Object] addAny $slot]
}

BaseClass instproc addAnyAttribute {slotname type value} {
	return [[my Object] addAnyAttribute $slotname $type $value]
}	



Generic instproc init args {
	set classpath [lindex $args 0]
	my Namespace [namespace qualifiers $classpath]
	my Type [namespace tail $classpath]	

	next
	
	set args [lrange $args 1 end]

	if { [lindex $args 0] != "" } {
		foreach slot [[my Object] attributes] {
			if { [$slot text] } {
				[my Object] initSlot $slot [join $args]
				break
			}
		}
	}
	
	return [my Object]
}

}

