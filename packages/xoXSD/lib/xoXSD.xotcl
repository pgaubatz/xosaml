package provide xoXSD 0.1

package require XOTcl
package require xoXSD::Slots
package require xoXSD::DataTypes
package require xoXSD::Core

namespace import -force ::xotcl::my
namespace import -force ::xotcl::next
namespace import -force ::xotcl::self
namespace import -force ::xotcl::Object
namespace import -force ::xotcl::Class

namespace eval ::xoXSD {
	
::xotcl::Class CoreObjectWrapper -slots {
	::xotcl::Attribute type
	::xotcl::Attribute object
}

CoreObjectWrapper instproc init args {
	if { [my type] eq "" } {
		error "ERROR: no type given..."	
	}
	my object [[my type] new]
}

CoreObjectWrapper instproc getObject {} {
	return [my object]	
}

CoreObjectWrapper instproc createSandboxedObject {type {args {}}} {
	set obj [Object autoname xoxsdobj]
	namespace eval ::xoXSD::sandbox $type $obj $args
	return xoXSD::sandbox::$obj
}

CoreObjectWrapper instforward export 		{% my object} %proc
CoreObjectWrapper instforward check 		{% my object} %proc
CoreObjectWrapper instforward print 		{% my object} %proc
CoreObjectWrapper instforward printSlots 	{% my object} %proc
CoreObjectWrapper instforward addAny 		{% my object} %proc
CoreObjectWrapper instforward addAnyAttribute 	{% my object} %proc	
CoreObjectWrapper instforward unknown 		{% my object} %proc
CoreObjectWrapper instforward marshal 		{% my object} %proc
CoreObjectWrapper instforward . 		{% my object} %proc

	
::xotcl::Class DefaultCoreObjectWrapper -superclass ::xoXSD::CoreObjectWrapper

DefaultCoreObjectWrapper instproc init args {
	my type [lindex $args 0]	
  
	next
	
	set args [lrange $args 1 end]
	if { [lindex $args 0] ne "" } {
		foreach slot [[my object] attributes] {
			if { [$slot text] } {
				[my object] initSlot $slot [join $args]
				break
			}
		}
	}
	return [my object]
}

}


namespace eval ::xoXSD::sandbox {
	
variable __searchPath [list]

proc addNamespace {ns {position end}} {
	variable __searchPath
	set __searchPath [linsert $__searchPath $position $ns]
}

addNamespace "::xoXSD::Core"
addNamespace "::xoXSD::DataTypes"

namespace unknown [list ::xoXSD::sandbox::unknown]

proc unknown {cmd args} { 
	variable __searchPath
	
	set found false
	set cmd [string map {":" "::"} $cmd]
	
	foreach path $__searchPath {
		if { [namespace qualifiers $cmd] ne "" } {
			set path [namespace qualifiers $path]
		}
		append path "::$cmd"
		if { [Object isobject $path] } {
			set found true
			break
		}
	}

	if { $found && [lindex $args 0] ne ""} {
		set cmdname [lindex $args 0]
		set cmdargs [lrange $args 1 end]
		if { [lsearch [$path info heritage] "::xoXSD::CoreObjectWrapper"] == -1 } {
			set run "::xoXSD::DefaultCoreObjectWrapper $cmdname $path $cmdargs"
		} else {
			set run "$path $cmdname $cmdargs"
		}	
		
		uplevel 1 $run
		
	} else {
		#fallback: invoke the standard unknown-handler...
		::unknown $cmd $args
	}
}	
	
}