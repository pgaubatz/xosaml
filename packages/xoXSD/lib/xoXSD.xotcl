package provide xoXSD 0.1

package require XOTcl
package require xoXSD::Slots
package require xoXSD::DataTypes
package require xoXSD::Core

namespace unknown [list ::xoXSD::unknown]

namespace import -force ::xotcl::my
namespace import -force ::xotcl::next
namespace import -force ::xotcl::self
namespace import -force ::xotcl::Object
namespace import -force ::xotcl::Class

namespace eval ::xoXSD {
	
::xotcl::Class BaseClass -slots {
	::xotcl::Attribute Type
	::xotcl::Attribute Namespace
	::xotcl::Attribute Object
}

::xotcl::Class Generic -superclass ::xoXSD::BaseClass

variable searchPath [list]

proc addNamespace {ns {position end}} {
	global searchPath
	if { $position == "end" } {
		lappend searchPath $ns
	} else {
		set searchPath [linsert $searchPath $position $ns]
	}
}

addNamespace "::xoXSD::Core"
addNamespace "::xoXSD::DataTypes"

proc unknown args { 
	global searchPath
	
	set found false
	set class [lindex $args 0]
	set class [string map {":" "::"} $class]
	
	foreach path $searchPath {
		if { [namespace qualifiers $class] != "" } {
			set path [namespace qualifiers $path]
		}
		append path "::$class"
		if { [Object isobject $path] } {	
			set found true
			break
		}
	}
	
	if { $found && [lindex $args 1] != ""} {
		set cmdname [lindex $args 1]
		set args [lrange $args 2 end]
		if { [lsearch [$path info heritage] "::xoXSD::BaseClass"] == -1 } {
			set cmd "::xoXSD::Generic $cmdname $path $args"
		} else {
			set cmd "$path $cmdname $args"
		}	
	
		uplevel #0 $cmd
		
	} else {
		#fallback: invoke the standard unknown-handler...
		::unknown $args
	}
}	


BaseClass instproc init args {
	if { [my Type] != "" } {
		set object "[my Namespace]::[my Type]"
		my Object [$object new]
	} else {
		error "ERROR: no Type given..."	
	}
}

BaseClass instproc check {} {
	puts "Checking [self]..."
	if { [[my Object] check] } {
		puts "OK - [self] seems to be valid.\n"	
	} else {
		puts "FAILURE - [self] has unmet dependencies. Check for errors above!\n"
	}
}

BaseClass instproc export {} {
	return [[my Object] export]
}
	
BaseClass instproc addAny {slot} {
	if { [$slot procsearch getObject] != "" } {
		set slot [$slot getObject]
	}
	return [[my Object] addAny $slot]
}

BaseClass instproc addAnyAttribute {slotname type value} {
	if { [Object isobject $value] } {
		if { [$value procsearch getObject] != "" } {
			set value [$value getObject]
		}
	}
	return [[my Object] addAnyAttribute $slotname $type $value]
}	

BaseClass instproc print {} {
	puts "Exporting [self]..."
	puts [[my Object] export]
}

BaseClass instproc getObject {} {
	return [my Object]	
}

BaseClass instproc printSlots {} {
	[my Object] printSlots	
}

BaseClass instproc unknown args {	
	set first [lindex [split $args] 0]
	set from [expr {[string length $first] + 1}]
	set rest [split [string range $args $from end] " "]
	set obj [my Object]
	
	#read slot
	if { $rest == "" } {		
		return [[$obj getSlot $first] export]	
	}
	
	#set slot...
	set success false
	if { [$obj getSlotType $first] == "XML:Attribute" } {
		set success [$obj initSlot $first $rest]	
	} else {
		set success [$obj setSlot $first [$rest getObject]]
	} 
	
	if { !$success } {
		puts "ERROR: [$obj class] doesn't contain a slot named: $first"	
	}
	
	return $success
}

Generic instproc init args {
	set classpath [lindex $args 0]
	my Namespace [namespace qualifiers $classpath]
	my Type [namespace tail $classpath]	

	next
	
	set args [lrange $args 1 end]

	if { [lindex $args 0] != "" } {
		foreach slot [[my Object] attributes] {
			if { [$slot text] } {
				[my Object] initSlot $slot $args
				break
			}
		}
	}
	
	return [my Object]
}

}

