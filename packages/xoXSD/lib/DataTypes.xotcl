package provide xoXSD::DataTypes 0.1

package require XOTcl
package require xoXSD::Core

namespace eval ::xoXSD::DataTypes {
	
::xotcl::Class DataType -superclass ::xoXSD::Core::xsd:generic -slots {
	::xotcl::Attribute data
	::xotcl::Attribute valid -default false
}

DataType instproc export {ignored name} {
	return "<$name>[my getContent]</$name>"
}

DataType instproc getContent {} {
	if { [my valid] } {
		return [my data]
	} else {
		return ""
	}
}
	
DataType instproc setContent {data} {
	my data $data
	my valid [my check]
}

DataType instproc init { {data ""} } {
	my setContent $data	
}
	
DataType instproc check {} {
	return true
}
	
DataType instproc getXmlNamespace args {
	return "http://www.w3.org/2001/XMLSchema-datatypes"
}

# String Data Types
::xotcl::Class string 		  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class normalizedString   -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class token 		  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class ENTITIES 	  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class ENTITY 		  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class IDREF 		  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class IDREFS 		  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class language 	  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class Name 		  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class NCName 		  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class ID 		  -superclass ::xoXSD::DataTypes::NCName	
::xotcl::Class NMTOKEN 		  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class NMTOKENS 	  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class QName 		  -superclass ::xoXSD::DataTypes::DataType

# Date and Time Data Types
::xotcl::Class date 		  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class dateTime 	  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class time 		  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class duration 	  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class gDay 		  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class gMonth 		  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class gMonthDay 	  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class gYear 		  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class gYearMonth 	  -superclass ::xoXSD::DataTypes::DataType

# Numeric Data Types
::xotcl::Class decimal 		  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class integer 		  -superclass ::xoXSD::DataTypes::decimal
::xotcl::Class byte 		  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class int 		  -superclass ::xoXSD::DataTypes::integer
::xotcl::Class negativeInteger 	  -superclass ::xoXSD::DataTypes::integer
::xotcl::Class nonNegativeInteger -superclass ::xoXSD::DataTypes::integer
::xotcl::Class nonPositiveInteger -superclass ::xoXSD::DataTypes::integer
::xotcl::Class positiveInteger 	  -superclass ::xoXSD::DataTypes::integer
::xotcl::Class short 		  -superclass ::xoXSD::DataTypes::integer
::xotcl::Class long 		  -superclass ::xoXSD::DataTypes::integer	
::xotcl::Class double 		  -superclass ::xoXSD::DataTypes::decimal
::xotcl::Class float 		  -superclass ::xoXSD::DataTypes::decimal
::xotcl::Class unsignedLong 	  -superclass ::xoXSD::DataTypes::nonNegativeInteger
::xotcl::Class unsignedInt 	  -superclass ::xoXSD::DataTypes::nonNegativeInteger
::xotcl::Class unsignedShort 	  -superclass ::xoXSD::DataTypes::nonNegativeInteger
::xotcl::Class unsignedByte 	  -superclass ::xoXSD::DataTypes::DataType
	
# Miscellaneous Data Types
::xotcl::Class anyURI 		  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class base64Binary 	  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class boolean 		  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class hexBinary 	  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class NOTATION 	  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class QName 		  -superclass ::xoXSD::DataTypes::DataType
::xotcl::Class anyType 		  -superclass ::xoXSD::DataTypes::DataType

string instproc check {} {
	return [regexp {^[\x9\xA\xD\x20-\xD7FF\xE000-\xFFFD\x10000-\x10FFFF]*$} [my data]]
}
	
dateTime instproc setContent {data} {
	if { $data == "now" } {
		set data [clock seconds]
	} elseif { [regexp {^\d*?\-\d{2}\-\d{2}T\d{2}\:\d{2}\:\d{2}Z$} $data] } {
		set data [clock scan $data -format {%Y-%m-%dT%H:%M:%SZ} -locale en_US -timezone :UTC]
	} 
	next $data
}
	
dateTime instproc check {} {
	if { [my data] == "now" || [::string is digit -strict [my data]] && [my data] >= 0 } {
		return true
	}
	return false
}
	
dateTime instproc getContent {} {
	if { [my data] == "" } {
		return ""
	}
	return [clock format [my data] -format {%Y-%m-%dT%H:%M:%SZ} -locale en_US -timezone :UTC]
}

base64Binary instproc check {} {
	return [regexp {^((([A-Za-z0-9+/] ?){4})*(([A-Za-z0-9+/] ?){3}[A-Za-z0-9+/]|([A-Za-z0-9+/] ?){2}[AEIMQUYcgkosw048] ?=|[A-Za-z0-9+/] ?[AQgw] ?= ?=))?$} [my data]]	
}
	
boolean instproc check {} {
	return [::string is boolean -strict [my data]]
}

boolean instproc getContent {} {
	if { [my data] } {
		return "true"
	}
	return "false"
}
	
decimal instproc check {} {
	return [regexp {^[+-]?(\d+(\.\d*)?|(\.\d+))$} [my data]]
}
	
integer instproc check {} {
	set isDecimal [next]
	set isInteger [regexp {^[+-]?\d+$} [my data]]
	return [expr {$isDecimal && $isInteger}]
}
	
nonNegativeInteger instproc check {} {
	set isInteger [next]
	set isNonNegative [regexp {^[+]?\d+$} [my data]]
	return [expr {$isInteger && $isNonNegative}]
}
	
unsignedShort instproc check {} {
	set isNonNegativeInteger [next]
	return [expr {$isNonNegativeInteger && [my data] <= 65535}]
}

anyURI instproc check {} {
	return [regexp {(?:[[:alpha:]]?)(?:\w){2,7}:(?://?)(?:[^[:space:]>"]*)|(^urn\:([[:alnum:]]|\-)*?\:(.*))} [my data]]
}

ID instproc check {} {
	set isNCName [next]
	return [expr {$isNCName}]
}
	
NCName instproc check {} {
	return [regexp {^([[:alnum:]]|\_)+$} [my data]]
}
	
anyType instproc check {} {
	return true
}

}
