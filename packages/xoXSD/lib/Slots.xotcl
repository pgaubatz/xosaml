package provide xoXSD::Slots 0.1

package require XOTcl

namespace eval ::xoXSD::Slots {

namespace export *

::xotcl::Class Attribute -superclass ::xotcl::Attribute

::xotcl::Class XMLAttribute -superclass ::xoXSD::Slots::Attribute -slots {
	::xotcl::Attribute use 	     -default "optional"
	::xotcl::Attribute namespace -default false
	
	# System-specific attributes:
	::xotcl::Attribute text       -default false
	::xotcl::Attribute enumvalues -default ""
	::xotcl::Attribute any	      -default false
}
	
::xotcl::Class XMLElement -superclass ::xoXSD::Slots::Attribute -slots {
	::xotcl::Attribute minOccurs  -default 1
	::xotcl::Attribute maxOccurs  -default 1
	::xotcl::Attribute namespace  -default false
	
	# System-specific attributes:
	::xotcl::Attribute sequence   -default 99999
	::xotcl::Attribute any	      -default false
	::xotcl::Attribute anyCounter -default 0
}

::xotcl::Class XMLChild -superclass ::xoXSD::Slots::XMLElement


Attribute instproc __formatType {type} {
	set pos  [string first ":" $type 2]
	set type [string range $type [expr $pos + 2] end]
	set type [string map {"DataTypes" "xsd"} $type]
	return $type
}


XMLAttribute instproc assign {domain var value} {
	if { ![Object isobject $value] } {	
		set value [[[self] type] new $value]
	} 
	if { $value eq "" || [$value class] ne [[self] type] || ![$value check] } {
		if { $var eq "__text" } {
			$domain __error "The textual content is not valid."
		} else {
			$domain __error "The content of \"$var\" is not valid."
		}
		return false
	}
	$domain set $var $value
}

XMLAttribute instproc getInfo {} {
	set o [list]
	if { [[self callingobject] __slotFilled -recursive true -exact true [self]] } {
		lappend o "Assigned: true"
	}
	lappend o "Use: [[self] use]"
	if { [[self] namespace] != false } {
		lappend o "Namespace: [[self] namespace]"
	}
	return $o
}

XMLAttribute instproc getType {} {
	if { [namespace tail [self]] eq "__anyAttribute" } {
		return "<<Any>>"
	} 
	return [my __formatType [[self] type]]
}

XMLAttribute instproc getName {n} {
	if { [namespace tail $n] eq "__anyAttribute" } {
		return "<<Any>>"
	} 
	if { [namespace tail $n] eq "__text" } {
		return "<<Text>>"
	} 
	return [namespace tail $n]
}


XMLElement instproc getInfo {} {
	set o [list]
	set occurs [[self callingobject] __slotFilled -recursive true -exact true [self]]
	if { $occurs } {
		lappend o "Assigned: true"
	}
	if { $occurs > 1 } {
		lappend o "Occurs: $occurs"
	}
	if { [[self] minOccurs] != 1 } {
		lappend o "MinOccurs: [[self] minOccurs]"
	}
	if { [[self] maxOccurs] != 1 } {
		lappend o "MaxOccurs: [[self] maxOccurs]"
	}
	if { [[self] namespace] != false } {
		lappend o "Namespace: [[self] namespace]"
	}
	if { [my __isNested] } {
		lappend o "Parent: [my __getHierarchy]"
	}
	return $o
}

XMLElement instproc __isNested {} {
	if { [string first "__choice" [self]] != -1} {
		return true
	}
	if { [string first "__sequence" [self]] != -1 } {
		return true
	}
	return false
}
	
XMLElement instproc __getHierarchy {} {
	return [my __formatType [namespace qualifiers [namespace qualifiers [self]]]]
}

XMLElement instproc getType {} {
	if { [namespace tail [self]] eq "__any" } {
		return "<<Any>>"
	} 	
	return [my __formatType [[self] type]]
}

XMLElement instproc getName {n} {
	if { [namespace tail $n] eq "__any" } {
		return "<<Any>>"
	}
	return [namespace tail $n]
}

}
