package provide xoXSD::Core 0.1

package require tdom
package require XOTcl

namespace eval ::xoXSD::Core {
	
##############################################
#               * Definition *               #
##############################################	
	
::xotcl::Class xsd:generic -slots {	
	::xotcl::Attribute elements
	::xotcl::Attribute attributes
}

::xotcl::Class xsd:element 	-superclass ::xoXSD::Core::xsd:generic

::xotcl::Class xsd:complexType 	-superclass ::xoXSD::Core::xsd:generic

::xotcl::Class xsd:sequence 	-superclass ::xoXSD::Core::xsd:generic -slots {
	::xotcl::Attribute sequence -default false
}

::xotcl::Class xsd:choice 	-superclass ::xoXSD::Core::xsd:generic -slots {
	::xotcl::Attribute slotfree 	 -default true
	::xotcl::Attribute choiceparents -default ""
}

##############################################
#              * Constructors *              #
##############################################

xsd:generic instproc init args {
	#puts "GENERIC -> INIT -> [self] [my class]"
	
	# create new instances of all classchildren
	foreach	child [[my class] info classchildren] {
		eval $child new -childof [self] 
	}
	
	my elements [list]
	my attributes [list]
	
	foreach slot [my getLocalSlots] {
		set slotclass [namespace tail [$slot class]]
		
		if { $slotclass == "XML:Attribute" } {
			my lappend attributes $slot	
		} elseif { $slotclass == "XML:Element" } {
			my lappend elements $slot
		} 
	}	

	#puts "([my class]) -> ELEMENTS -> [my elements]"
	#puts "([my class]) -> ATTRIBUTES -> [my attributes]"
	#puts "([my class]) -> CHILDREN -> [my info children]"
	#puts ""
}

xsd:sequence instproc init args {
	next
	#puts "SEQUENCE -> INIT -> [self] [my class]" 	
	
	set slots [list]
	foreach slot [my getLocalSlots] {
		# TODO: do we need attributes too?!
		lappend slots [list $slot [$slot sequence]]
	}
	
	my sequence [list]
	foreach slot [lsort -integer -index 1 $slots] {
		set slot [lindex $slot 0]
		set slotname [namespace tail $slot]
		set slotclass [namespace tail [$slot class]]
		
		if { $slotclass == "XML:Child" } {
			foreach child [my info children] {
				set childclass [namespace tail [$child class]]
				if { $childclass == $slotname } {
					my lappend sequence $child	
				}
			}
		} else {
			my lappend sequence $slot
		}
	}
	
	# add the missing childclasses (with no sequence)
	foreach child [my info children] {
		if { [lsearch [my sequence] $child] == -1 } {
			#puts "Adding $child to the sequence..."
			my lappend sequence $child
		}
	}
}

xsd:choice instproc init args {
	next
	#puts "CHOICE -> INIT -> [self] [my class]" 	
	
	# get "choice-parents"...
	set parent [my info parent]
	while { $parent != "::" } {
		set cls [namespace tail [$parent class]]
		if { [string match "__choice*" $cls] } {
			my lappend choiceparents $parent	
		}
		set parent [$parent info parent]
	}
}

##############################################
# * Various "publicly" available functions * #
##############################################

xsd:generic instproc check {} {
	set validity true
	
	foreach slot [my attributes] {
		set name [namespace tail $slot]
		
		if { [$slot use] eq "required" && ![my slotFilled $slot] } {
			set validity false
			my error "needs object: $name (type: [$slot type])"
		}
	}
	
	foreach slot [my elements] {
		set name [namespace tail $slot]
		
		if { [$slot minOccurs] > 0 && ![my slotFilled $slot] } {
			set validity false
			my error "needs object: $name (type: [$slot type])"
		}
		
		#if { [$slot maxOccurs] != "unbounded" && [my slotFilled $slot] } {
		#	set validity false
		#	my error "needs object: $name (type: [$slot type])"
		#}
		
	}
	
	return $validity
}

xsd:generic instproc export { {addXmlNamespaces true} } {
	if { ![my check] } {
		my error "is not valid."
		return ""
	}
	
	set name [namespace tail [my class]]	
	set prefix [my getXmlPrefix]

	if { $prefix != "" } {
		set name "$prefix:$name"
	}
	
	# create the document:
	set doc [dom createDocument $name]
	set root [$doc documentElement]
	
	# add the xmlns-attributes:
	if { $addXmlNamespaces } {	
		$root setAttribute "xmlns:$prefix" [my getXmlNamespace]
		
		foreach element [my elements] {
			if { ![my slotFilled $element] } continue
			if { [$element text] } continue
			
			set element [namespace tail $element]
			set ns [[my $element] getXmlNamespace]
			set prefix [[my $element] getXmlPrefix]
			
			$root setAttribute "xmlns:$prefix" $ns
		}	
	}
	
	# add the attributes:
	my exportAttributes $doc $root
	
	# add the containing sub-elements:
	my exportElements $doc $root	

	return [$root asXML]
}

xsd:generic instproc getSlot {slot} {
	set slot [my doGetSlot $slot]
	if { $slot == false } {
		my error "there is no such Element/Attribute to be get: $slot"	
		return false
	} 
	return $slot
}

xsd:generic instproc getSlotClass {slot} {
	set slotclass [my doGetSlotClass $slot]
	if { $slot == false } {
		my error "there is no such slot: $slot"	
		return false
	} 
	return $slotclass
}

xsd:generic instproc setSlot {slot value} {
	if { [my doSetSlot $slot $value] == false } {
		my error "there is no such Element/Attribute to be set: $slot"	
		return false
	}
	return true
}

xsd:generic instproc initSlot {slot args} {	
	set slotclass [my getSlotClass $slot]
	if { $slotclass == "" } {
		my error "there is no such slot: $slot"
		return	
	}
	set slottype [$slotclass type]
	if { [namespace qualifiers $slottype] != "::xoXSD::DataTypes" } {
		my error "\"$slot\" is no basic data type."
		return
	}
	my setSlot $slot [$slottype new $args]
}

xsd:generic instproc printSlots { {isRoot true} {c ""} } {
	if { $isRoot } {
		set c [my class]
		puts "\n[self] ([namespace tail $c]) has the following slots:"
	}
	foreach slot [my getSlots] {	
		set isset ""
		if { [my slotFilled $slot] } { set isset "(filled)" }
		set slot [string range $slot [expr {[string length $c]+2}] end]
		set slot [string map {"::slot" ""} $slot]
		set slot [string map {"::" " -> "} $slot]
		set slot [string map {"__" ""} $slot]
		puts " *) $slot $isset"
	}	
	foreach child [my info children] {
		$child printSlots false	$c
	}
}

##############################################
#         * Various helper functions *       #
# Note: you shouldn't call them directly.    #
##############################################

xsd:generic instproc exportAttributes {doc root} {
	foreach attribute [my attributes] {
		if { ![my slotFilled $attribute] } continue
	
		set attr [namespace tail $attribute]
		set value [[my $attr] export false]
		
		if { [$attribute text] } {
			$root appendChild [$doc createTextNode $value]
		} else {	
			$root setAttribute $attr $value
		}
	}
	
	# do the same with all children
	foreach child [my info children] {
		$child exportAttributes $doc $root	
	}
}

xsd:generic instproc exportElements {doc root} {	
	# iterate over all elements
	foreach element [my elements] {
		my exportElement $doc $root $element
	}

	# do the same with all children
	foreach child [my info children] {
		$child exportElements $doc $root	
	}
}

xsd:sequence instproc exportElements {doc root} {
	foreach obj [my sequence] {
		#puts " -> SEQUCENE -> $obj"
		if { [string match "*::slot::*" $obj ] } {
			#puts "EXPORT ELEMENT -> $obj"
			my exportElement $doc $root $obj
		} else {
			#puts "EXPORT ELEMENT(S) -> $obj"
			$obj exportElements $doc $root	
		}
	}
}

xsd:generic instproc exportElement {doc root element} {
	if { ![my slotFilled $element] } return
	#puts "exportElement -> $element"
	set content [[my [namespace tail $element]] export false]
	if { [$element text] } {
		#puts "ELEMENT HAS TEXT -> $element"
		# TODO: fix me... (XML prefixes)
		set element [namespace tail $element]
		set node [$doc createElement $element]
		$node appendChild [$doc createTextNode $content]
		$root appendChild $node
	} else {
		$root appendXML $content
	}	
}

xsd:generic instproc getXmlNamespace {} {
	set qualifiers [namespace qualifiers [my class]]
	namespace upvar $qualifiers xmlNamespace xmlNamespace
	return $xmlNamespace
}

xsd:generic instproc getXmlPrefix {} {
	set qualifiers [namespace qualifiers [my class]]
	namespace upvar $qualifiers xmlPrefix xmlPrefix
	return $xmlPrefix
}

xsd:generic instproc getSlots {} {
	return [concat [my elements] [my attributes]]
}

xsd:generic instproc getLocalSlots {} {
	# now create a list of all slots
	set slots [[my class] info slots]
	
	# remember slotnames
	foreach slot $slots {set slotname([namespace tail $slot]) 1}
	
	# iterate over class structure
	set heritage [[my class] info heritage]
	foreach c [lsearch -inline -all -not $heritage "::xoXSD::Core::xsd:*"] {
		foreach slot [$c info slots] {
			set key slotname([namespace tail $slot])
			
			# don't add slots which are already defined in 
			# more specialized classes
			if {[info exists $key]} continue
			set $key 1
			lappend slots $slot
		}
	}
	
	return $slots
}

xsd:generic instproc getSlotType {slot} {
	# returns either XML:Attribute or XML:Element
	return [namespace tail [[my getSlotClass $slot] class]]
}

xsd:generic instproc doGetSlot {slot} {
	set slot [namespace tail $slot]
	
	if { ![my slotExists $slot] } {
		foreach child [my info children] {
			return [$child doGetSlot $slot]		
		}
	} else {
		return [my $slot]
	}
	
	return false
}

xsd:generic instproc doSetSlot {slot value} {
	set slot [namespace tail $slot]
	if { ![my slotExists $slot] } {
		foreach child [my info children] {
			return [$child doSetSlot $slot $value]		
		}
	} else {
		#puts "SETSLOT -> [my class] $slot"
		return [my $slot $value]
	}
	return false
}

xsd:choice instproc doSetSlot {slot value} {
	if { [my slotfree] } {
		if { [next] != false } {
			my slotfree false
			foreach parent [my choiceparents] {
				$parent slotfree false	
			}
		}
	} elseif { ![my slotfree] && [my slotExists $slot] } {
		foreach child [my info children] {
			return [$child doSetSlot $slot $value]
		}
	} else {
		my error "is already set by another Element/Attribute."
		return false 
	}
}

xsd:generic instproc doGetSlotClass {slot} {
	set slot [namespace tail $slot]
	if { ![my slotExists $slot] } {
		foreach child [my info children] {
			return [$child doGetSlotClass $slot]		
		}
	} else {
		return [lsearch -inline -glob [my getSlots] "*::$slot"]
	}
}

xsd:generic instproc error {msg} {
	puts "XML-Error: [self] (type: [my class]) $msg"
}

xsd:generic instproc slotExists {slot} {
	set existance [lsearch [my getSlots] "*::slot::[namespace tail $slot]"]
	return [expr { $existance != -1 } ]
}

xsd:generic instproc slotFilled {slot} {
	return [my exists [namespace tail $slot]]
}

}

